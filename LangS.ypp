%{

#include <string>
#include <fstream>
#include <iostream>

#include "ParseTree.h"

#define YYSTYPE Node* 
using namespace std;
using namespace ParseTree;

std::ofstream out;
void yyerror(std::string s);
int yylex (void);

Program *theProg;

%}

%token Scalar
%token Vector 
%token STRING
%token BinOP
%token Print
%token Exit

%left BinOP

%%

Prog:	Stm ';' Prog	{ theProg->add((Statement *)$1); }
	| Stm ';'	{ theProg->add((Statement *)$1); }

Stm:	Exit			{ $$ = new ExitStatement();}
	| Scalar '=' Value	{ $$ = new AssingmentStatement((Identifier*)$1,(Value*)$3); }
	| Vector '=' List	{ $$ = new AssingmentStatement((Identifier*)$1,new StringValue("#list#")); }
	| Value			{ }
	| Print Value 		{ $$ = new PrintStatement((Value*)$2); }

Value:	STRING 			{ $$ = $1; }
	| Vector		{ $$ = $1; }
	| Scalar		{ $$ = $1; }
	| Value BinOP Value	{ $$ = new BinOpValue(((Identifier*)$2)->getName(),(Value*)$1,(Value*)$3); }

List: '[' Items ']'

Items: Items ',' Value
	| Value

%%

using namespace std;

void yyerror(std::string s) {
    cerr<<s<<endl;
}


